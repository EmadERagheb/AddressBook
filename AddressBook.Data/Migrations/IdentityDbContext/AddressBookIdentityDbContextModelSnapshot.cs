// <auto-generated />
using System;
using AddressBook.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AddressBook.Data.Migrations.IdentityDbContext
{
    [DbContext(typeof(AddressBookIdentityDbContext))]
    partial class AddressBookIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddressBook.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c0bsdf33-57b5-4b18-8878-d24bda5e8e5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecc138d0-1245-4ce7-810c-030c2de56e19",
                            DisplayName = "Admin Emad",
                            Email = "emaderagheb@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMADERAGHEB@GMAIL.COM",
                            NormalizedUserName = "EMADERAGHEB@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENr52txLkxrvrzTcnU53A97FFI2w4/xEybKC8GHc4qoPuWVp9Ns3Im8j1jK4VtIB9w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2378da26-1be4-45e3-9b0a-ce89fda641bc",
                            TwoFactorEnabled = false,
                            UserName = "emaderagheb@gmail.com"
                        },
                        new
                        {
                            Id = "c0bsdf33-57b5-4b18-2303-d24bda5e8e5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11f76e0e-99fa-47c0-a04f-ab2b071acf36",
                            DisplayName = "User Emad",
                            Email = "emadeidragheb@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMADEIDRAGHEB@GMAIL.COM",
                            NormalizedUserName = "EMADEIDRAGHEB@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2bDQiTTHUt45AC0iz4ti/NifQbcRS9pkXnjV89gwL6hmEV0aau/DyBt3hPw0ASaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80695ae4-eec5-4833-9bb4-0a0580e0e4a1",
                            TwoFactorEnabled = false,
                            UserName = "emadeidragheb@gmail.com"
                        },
                        new
                        {
                            Id = "9d5489cc-09aa-46b1-a580-f18ec0084946",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "331a7018-6de6-49bf-9c5f-a98ba3372985",
                            DisplayName = "Sameh Hussein",
                            Email = "shussein@tamweely.com.eg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHUSSEIN@TAMWEELY.COM.EG",
                            NormalizedUserName = "SUSHUSSEIN@TAMWEELY.COM.EG",
                            PasswordHash = "AQAAAAIAAYagAAAAEGj7i3c40nxVNeh2EPze8OcZqjSVGt5b/dcLXhXvYhqfSUxYqMp6tcrvm3WHOEr8lQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1b879ebb-fef6-49c8-9824-b0ce47f45420",
                            TwoFactorEnabled = false,
                            UserName = "shussein@tamweely.com.eg"
                        },
                        new
                        {
                            Id = "9d5489cc-09aa-46b1-a580-f18ec1235874",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2aa96d13-92e2-4324-ac14-c6ef5933d775",
                            DisplayName = "Admin Sameh Hussein",
                            Email = "admin.shussein@tamweely.com.eg",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.SHUSSEIN@TAMWEELY.COM.EG",
                            NormalizedUserName = "ADMIN.SUSHUSSEIN@TAMWEELY.COM.EG",
                            PasswordHash = "AQAAAAIAAYagAAAAEHer80KtD4LNpRNzae5MAqUnXGOztkTBmjlMQPfcVdJSb9HZOLUyCFWET5XqXp3mKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79394dbc-c90d-4a51-849a-59f69fea60cb",
                            TwoFactorEnabled = false,
                            UserName = "admin.shussein@tamweely.com.eg"
                        });
                });

            modelBuilder.Entity("AddressBook.Domain.Models.CostumeToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ce78aeb6-7cd4-47db-a96a-598bef56a1d9",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "54364591-ad1f-42f9-ba53-2a25f8fb4dcf",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c0bsdf33-57b5-4b18-8878-d24bda5e8e5a",
                            RoleId = "ce78aeb6-7cd4-47db-a96a-598bef56a1d9"
                        },
                        new
                        {
                            UserId = "c0bsdf33-57b5-4b18-2303-d24bda5e8e5a",
                            RoleId = "54364591-ad1f-42f9-ba53-2a25f8fb4dcf"
                        },
                        new
                        {
                            UserId = "9d5489cc-09aa-46b1-a580-f18ec0084946",
                            RoleId = "54364591-ad1f-42f9-ba53-2a25f8fb4dcf"
                        },
                        new
                        {
                            UserId = "9d5489cc-09aa-46b1-a580-f18ec1235874",
                            RoleId = "ce78aeb6-7cd4-47db-a96a-598bef56a1d9"
                        });
                });

            modelBuilder.Entity("AddressBook.Domain.Models.CostumeToken", b =>
                {
                    b.HasOne("AddressBook.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AddressBook.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AddressBook.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AddressBook.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
